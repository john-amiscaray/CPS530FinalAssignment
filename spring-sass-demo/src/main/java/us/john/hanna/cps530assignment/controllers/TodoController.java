package us.john.hanna.cps530assignment.controllers;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import lombok.AllArgsConstructor;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import us.john.hanna.cps530assignment.domain.TodoDto;
import us.john.hanna.cps530assignment.entities.Todo;
import us.john.hanna.cps530assignment.exceptions.BadAuthRequest;
import us.john.hanna.cps530assignment.services.TodoService;

import java.net.URI;
import java.util.Set;
import java.util.stream.Collectors;

// Include this controller in the API docs
@Api
// @RestController specifies that this bean will be for managing REST endpoints
@RestController
// Prefix all the endpoints here with /api/todo
@RequestMapping("/api/todo")
@AllArgsConstructor
public class TodoController {

    // This field is injected via the all args constructor generated by the annotation above
    private final TodoService todoService;

    // Map this method to the endpoint: GET /api/todo/allTodos
    @GetMapping("/allTodos")
    // ApiOperation is for specifying info for the API docs
    @ApiOperation(value="Get all your to-dos", notes="requires authentication")
    public ResponseEntity<Set<TodoDto>> myTodos() throws BadAuthRequest {

        return ResponseEntity.ok(todoService.getAllTodos().stream()
                .map(Todo::toDto)
                .collect(Collectors.toSet()));

    }

    // Map this method to the endpoint: POST /api/todo
    // @RequestBody specifies that the following argument represents the request body
    @PostMapping
    @ApiOperation(value="Post a new to-do", notes="requires authentication")
    public ResponseEntity<Void> postTodo(@RequestBody TodoDto dto) throws BadAuthRequest {

        Long todoId = todoService.createTodo(dto);
        return ResponseEntity.created(URI.create("/todo/" + todoId)).build();

    }

    // Map this method to the endpoint: GET /api/todo/{id} where id is the id of the TODO
    // @PathVariable specifies that the following argument is the path variable of {id} in the url
    @GetMapping("/{id}")
    @ApiOperation(value="Get to-do by Id", notes="requires authentication")
    public ResponseEntity<TodoDto> getTodoById(@PathVariable("id") Long id) throws BadAuthRequest {

        return ResponseEntity.ok(todoService.getTodoById(id).toDto());

    }

    // Map this method to the endpoint: PATCH /api/todo/{id} where id is the id of the TODO
    @PatchMapping("/{id}")
    @ApiOperation(value="Update to-do by Id", notes="requires authentication")
    public ResponseEntity<Void> updateTodo(@PathVariable("id") Long id, @RequestBody TodoDto dto) throws BadAuthRequest {

        todoService.updateTodo(id, dto);
        return ResponseEntity.created(URI.create("/todo/" + id)).build();

    }

    // Map this method to the endpoint: DELETE /api/todo/{id} where id is the id of the TODO
    @DeleteMapping("/{id}")
    @ApiOperation(value="Delete to-do by Id", notes="requires authentication")
    public ResponseEntity<Void> deleteTodo(@PathVariable("id") Long id) throws BadAuthRequest {

        todoService.deleteTodo(id);
        return ResponseEntity.noContent().build();

    }

}
